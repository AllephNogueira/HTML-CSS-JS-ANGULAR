function calcularIdade(){
    const anoNascimento = 1994
    const anoAtual = 2025
    const idadeAtual = anoAtual - anoNascimento
    return idadeAtual
}

function main(){
    /*
    Podemos lembrar do Kotlin
    Aqui dentro √© onde vamos fazer nosso programa principal

    Criamos as fun√ßoes fora
    Colocamos ela aqui dentro
    */

    console.log('Programa principal, devemos colocar o codigo aqui.')
    const idadeUsuario = calcularIdade()
    console.log(idadeUsuario)
}

// Chamamos aqui fora nosso principal
main();



/* EXPLICA√á√ÉO

Excelente pergunta, Alleph! O uso da fun√ß√£o main() nesse exemplo √© uma forma organizada e estruturada de construir programas, especialmente √∫til quando voc√™ quer deixar claro onde come√ßa a execu√ß√£o principal do seu c√≥digo ‚Äî como acontece em linguagens como Kotlin, Java, C, etc.
Vamos destrinchar isso com clareza:

üß© Por que usar main()?
- Organiza√ß√£o do c√≥digo
- Separar a l√≥gica principal dentro de main() ajuda a manter o c√≥digo limpo e modular.
- Fun√ß√µes auxiliares (como calcularIdade) ficam fora, e s√£o chamadas dentro do main().
- Facilidade de leitura
- Quando algu√©m l√™ seu c√≥digo, j√° sabe que tudo come√ßa no main().
- Isso √© especialmente √∫til em projetos maiores, com muitos arquivos e fun√ß√µes.
- Reutiliza√ß√£o e testes
- Voc√™ pode chamar main() v√°rias vezes, ou at√© evitar cham√°-la em certos contextos (como testes automatizados).
- Isso d√° mais controle sobre quando e como o programa roda.

üß† Analogia com Kotlin (como voc√™ mencionou)
Em Kotlin, o ponto de entrada de um programa √©:
fun main() {
    println("Ol√°, mundo!")
}


Voc√™ est√° replicando essa ideia em JavaScript, mesmo que tecnicamente n√£o seja obrigat√≥rio usar main() ‚Äî j√° que o JS executa tudo de cima pra baixo. Mas usar main() √© uma boa pr√°tica de estilo, especialmente se voc√™ vem de linguagens mais estruturadas.

üîç Como o fluxo funciona no seu exemplo
function calcularIdade() {
  const anoNascimento = 1994;
  const anoAtual = 2025;
  const idadeAtual = anoAtual - anoNascimento;
  return idadeAtual;
}

function main() {
  console.log('Programa principal, devemos colocar o c√≥digo aqui.');
  const idadeUsuario = calcularIdade();
  console.log(idadeUsuario);
}

// Aqui √© onde tudo come√ßa
main();


- calcularIdade() √© definida, mas n√£o executada ainda.
- main() √© definida, e dentro dela voc√™ chama calcularIdade().
- S√≥ quando voc√™ chama main() no final √© que tudo come√ßa a rodar.

Se quiser, posso te mostrar como isso se aplica em projetos maiores, ou como usar main() com fun√ß√µes ass√≠ncronas (async/await). Quer seguir por esse caminho?

 */